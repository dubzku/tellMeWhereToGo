{"version":3,"sources":["firebase.js","DisplayedSuggestions.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DisplayedSuggestions","this","props","travelTip","onClick","suggestionRemoval","Component","App","deleteSuggestion","indexOfSuggestion","remainingSuggestions","state","suggestions","filter","remainingSuggestion","index","setState","database","ref","on","snapshot","data","val","newArray","propName","push","console","log","className","htmlFor","type","id","map","suggestion","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAeAA,IAASC,cAXY,CACjBC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,8CAMIR,QAAf,ECJeS,G,6KATP,OACI,6BACI,2BAAIC,KAAKC,MAAMC,WACf,4BAAQC,QAASH,KAAKC,MAAMG,mBAA5B,oB,GALmBC,cCyFpBC,E,kDA3Eb,aAAe,IAAD,8BACZ,gBA8BFC,iBAAmB,SAACC,GAClB,IAEMC,EAFsB,YAAO,EAAKC,MAAMC,aAEMC,QAAO,SAACC,EAAqBC,GAC/E,OAAON,IAAsBM,KAG/B,EAAKC,SAAS,CACZJ,YAAaF,KArCf,EAAKC,MAAQ,CACXC,YAAa,IAHH,E,gEAOQ,IAAD,OAELrB,EAAS0B,WAAWC,MAE5BC,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAOD,EAASE,MAGhBC,EAAW,GAEjB,IAAK,IAAIC,KAAYH,EACnBE,EAASE,KAAKJ,EAAKG,IAGrBE,QAAQC,IAAIJ,GAEZ,EAAKP,SAAS,CACZJ,YAAaW,S,+BAqBR,IAAD,OACR,OACE,yBAAKK,UAAU,OACb,uDACA,2BAAOC,QAAQ,eAAf,wBACA,2BAAOC,KAAK,OAAOC,GAAG,gBACtB,2BAAOF,QAAQ,aAAf,2BACA,2BAAOC,KAAK,OAAOC,GAAG,cACtB,4BAAQD,KAAK,UAAb,UAKI7B,KAAKU,MAAMC,YAAYoB,KAAM,SAACC,EAAYlB,GAC1C,OACE,kBAAC,EAAD,CACAZ,UAAW8B,EACXC,IAAKnB,EACLV,kBAAqB,kBAAM,EAAKG,iBAAiBO,c,GAhE7CT,aCHE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.c3809500.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC2acaAMjzdXtheezetRsrw2gdVwpYEg8E\",\n    authDomain: \"winnie-ku-project-five.firebaseapp.com\",\n    databaseURL: \"https://winnie-ku-project-five.firebaseio.com\",\n    projectId: \"winnie-ku-project-five\",\n    storageBucket: \"winnie-ku-project-five.appspot.com\",\n    messagingSenderId: \"255739567594\",\n    appId: \"1:255739567594:web:d360859934c83adb6e2693\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\n\nclass DisplayedSuggestions extends Component {\n    render() {\n        return (\n            <div>\n                <p>{this.props.travelTip}</p>\n                <button onClick={this.props.suggestionRemoval}>Been there!</button>\n            </div>\n        )\n    }\n}\n\nexport default DisplayedSuggestions;","import React, { Component } from 'react';\n// import axios from 'axios';\nimport firebase from './firebase';\nimport './App.css';\nimport DisplayedSuggestions from './DisplayedSuggestions';\n\n// Pseudocode for MVPs\n\n// What does the app do? \n  // User comes to the landing page, and sees 2 inputs: (1) Enter the name of a country/city you would recommend travelling to (2) Enter a travel suggestion for that place\n  // User enters their travel tip, and presses submit\n// The data is stored in Firebase object\n// Data is pulled from Firebase, and displayed on the page \n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      suggestions: []\n    }\n  }\n\n  componentDidMount () {\n\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n      // console.log('snapshot', data);\n\n      const newArray = [];\n\n      for (let propName in data) {\n        newArray.push(data[propName]);\n      }\n\n      console.log(newArray);\n\n      this.setState({\n        suggestions: newArray\n      })\n\n    })\n  }\n\n  // Event handler to remove only the specific suggestion that is clicked on\n  deleteSuggestion = (indexOfSuggestion) => {\n    const copyOfSuggestionsArray = [...this.state.suggestions];\n\n    const remainingSuggestions = copyOfSuggestionsArray.filter((remainingSuggestion, index) => {\n      return indexOfSuggestion !== index\n    })\n\n    this.setState({\n      suggestions: remainingSuggestions\n    })\n\n  }\n\n\n  render () {\n    return (\n      <div className=\"App\">\n        <h1>Tell Me Where To Travel</h1>\n        <label htmlFor=\"destination\">Give me a suggestion</label>\n        <input type=\"text\" id=\"destination\" />\n        <label htmlFor=\"travelTip\">What should I do there?</label>\n        <input type=\"text\" id=\"travelTip\" />\n        <button type=\"submit\">Submit</button>\n\n\n        \n          {\n            this.state.suggestions.map ( (suggestion, index) => {\n            return (\n              <DisplayedSuggestions \n              travelTip={suggestion} \n              key={index} \n              suggestionRemoval = {() => this.deleteSuggestion(index)}\n              />\n            )\n            })\n          }\n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
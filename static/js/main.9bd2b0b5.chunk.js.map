{"version":3,"sources":["assets/origami.png","firebase.js","TravelAdvice.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","TravelAdvice","props","className","displayedAdvice","map","suggestion","key","destination","advice","src","photo","alt","photographerName","onClick","deleteAdvice","icon","faTimes","Footer","role","aria-label","href","target","rel","title","App","handleChange","event","setState","name","value","buttonSubmit","preventDefault","dbRef","database","ref","document","getElementById","axios","url","method","responseType","params","dataType","per_page","query","state","userInputDestination","headers","Authorization","then","response","destinationPhoto","data","photos","landscape","photographer","push","userInputAdvice","window","scrollTo","top","body","scrollHeight","behavior","catch","error","swal","deleteSuggestion","child","remove","suggestions","on","snapshot","val","newSuggestions","paperPlane","action","htmlFor","onChange","this","type","id","minLength","maxLength","placeholder","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.9bd2b0b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/origami.c4714cd6.png\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC2acaAMjzdXtheezetRsrw2gdVwpYEg8E\",\n    authDomain: \"winnie-ku-project-five.firebaseapp.com\",\n    databaseURL: \"https://winnie-ku-project-five.firebaseio.com\",\n    projectId: \"winnie-ku-project-five\",\n    storageBucket: \"winnie-ku-project-five.appspot.com\",\n    messagingSenderId: \"255739567594\",\n    appId: \"1:255739567594:web:d360859934c83adb6e2693\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\n\nconst TravelAdvice = (props) => {\n    return (\n        <main>\n            <div className=\"wrapper\">\n                <ul className=\"postItContainer\">\n                    {\n                    props.displayedAdvice.map ( (suggestion) => {\n                        return (\n                            <li key={suggestion.key} className=\"postItNotes\">\n                                \n                                    <h2>{suggestion.destination}</h2>\n                                    <p>{suggestion.advice}</p>\n                                    <div className=\"imageContainer\">\n                                        <img src={suggestion.photo} alt={`Photograph of ${suggestion.destination}, taken by ${suggestion.photographerName}`}/>\n                                    </div>\n                                    <button onClick={ () => props.deleteAdvice (suggestion.key) } className=\"deletePostIt\"><span className=\"srOnly\">Times/X icon from Font Awesome for deleting the suggestion</span><FontAwesomeIcon icon={faTimes} /></button>\n                                \n                            </li>\n                        )\n                    })\n                    }\n                </ul>\n            </div>\n        </main>\n    )\n}\n\nexport default TravelAdvice;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p><span role=\"img\" aria-label=\"heart emoji\">üíô</span> Created by <a href=\"https://github.com/dubzku\" target=\"_blank\" rel=\"noopener noreferrer\">Winnie Ku</a></p>\n\n            <p className=\"attribution\"><span role=\"img\" aria-label=\"airplane emoji\">‚úàÔ∏è</span> Icon by <a href=\"https://www.flaticon.com/free-icon/paper-plane_312619?term=paper%20airplane&page=1&position=46\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Eight Black Dots\">Eight Black Dots</a> from <a href=\"https://www.flaticon.com/\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Flaticon\">www.flaticon.com</a></p>\n            \n            <p className=\"attribution\"><span role=\"img\" aria-label=\"flashing camera emoji\">üì∏</span> Photos provided by <a href=\"https://www.pexels.com/\"target=\"_blank\" rel=\"noopener noreferrer\">Pexels</a></p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport firebase from \"./firebase\";\nimport TravelAdvice from \"./TravelAdvice\"\nimport Footer from \"./Footer\";\nimport paperPlane from \"./assets/origami.png\";\nimport swal from 'sweetalert';\nimport \"./App.css\";\n\n\nclass App extends Component {\n    // Lifecycle Step #1 - Constructor runs first - set the initial properties (ie state) on the component\n    constructor() {\n        super();\n        this.state = {\n        userInputDestination: \"\",\n        userInputAdvice: \"\",\n        suggestions: [],\n        destinationPhoto: \"\",\n        photographerName: \"\"\n        }\n    }\n\n    // Lifecycle Step #3 - componentDidMount() runs third, after the constructor and render have run\n    componentDidMount () {\n        const dbRef = firebase.database().ref();\n\n        // pulling in data from Firebase and setting it to state \n        dbRef.on(\"value\", (snapshot) => {\n            const data = snapshot.val();\n\n            const newSuggestions = [];\n\n            for (let key in data) {\n                newSuggestions.push({\n                key: key,\n                destination: data[key].destination,\n                advice: data[key].advice,\n                photo: data[key].photo,\n                photographerName: data[key].photographerName\n                });\n            }\n\n            this.setState({\n                suggestions: newSuggestions\n            })\n        })\n    }\n\n    // Event Listener for when user types in the text input/textarea fields; set the state for userInputDestination and userInputAdvice to be whatever the user typed\n    handleChange = (event) => {\n    this.setState({\n        [event.target.name]: event.target.value\n    })\n    }\n\n    // on button submit: \n        // (1) prevent default\n        // (2) error handling for if the user did not fill in both fields \n        // (3) make API/axios call to Pexels API using userInputDestination as the query \n        // (4) set destinationPhoto in state to be the url for the image returned from the API \n        // (5) push userInputDestination, userInputAdvice, and destinationPhoto from state to Firebase\n        // (6) set state for userInputDestination and userInputAdvice back to an empty string\n        // (7) scroll the window to the bottom of the page where the results are\n    buttonSubmit = (event) => {\n        event.preventDefault();\n\n        const dbRef = firebase.database().ref();\n\n        const apiKey = `563492ad6f917000010000017a8698fdc0aa4677b4cda27aa4991d1a`;\n\n        !document.getElementById(\"destination\").value || !document.getElementById(\"advice\").value\n        ? swal(\"Oops!\", \"Please fill in both fields!\", \"error\")\n        : axios({\n            url: `https://api.pexels.com/v1/search`,\n            method: `GET`,\n            responseType: `json`,\n            params: {\n                dataType: `json`,\n                per_page: 1,\n                query: `${this.state.userInputDestination}`\n            },\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        })\n        .then ((response) => {\n            this.setState({\n                destinationPhoto: response.data.photos[0].src.landscape,\n                photographerName: response.data.photos[0].photographer\n            });\n\n            dbRef.push({\n                destination: this.state.userInputDestination,\n                advice: this.state.userInputAdvice,\n                photo: this.state.destinationPhoto,\n                photographerName: this.state.photographerName\n            });\n\n            this.setState({\n                userInputDestination: \"\",\n                userInputAdvice: \"\"\n            });\n\n            window.scrollTo({ \n                top: document.body.scrollHeight, \n                behavior: 'smooth' })\n            \n        })\n        .catch((error) => {\n            swal(\"Hmm...\", \"...are you sure that's a real place?\", \"warning\");\n        });\n    }\n    \n    // Event Listener to delete the travel suggestion on button click \n    deleteSuggestion = (suggestion) => {\n        const dbRef = firebase.database().ref();\n        dbRef.child(suggestion).remove();\n    }\n\n    // Lifecycle Step #2 - Render method will run after the constructor; returns JSX to be displayed on page\n    render () {\n        return (\n            <div className=\"App\">\n                <header>\n                    <div className=\"wrapper\">\n                        <h1>Tell Me <span className=\"logoColour\">Where</span> To Go</h1>\n                        <div className=\"logoImageContainer\">\n                            <img src={paperPlane} alt=\"paper plane icon from Eight Black Dots\"/>\n                        </div>\n                        <form action=\"\">\n                            <label htmlFor=\"destination\">Where should I go?</label>\n                            <input onChange={this.handleChange} value={this.state.userInputDestination} type=\"text\" id=\"destination\" name=\"userInputDestination\" minLength=\"2\" maxLength=\"15\" placeholder=\"Enter a country / city\" />\n\n                            <label htmlFor=\"advice\">What should I do there?</label>\n                            <textarea onChange={this.handleChange} value={this.state.userInputAdvice} type=\"text\" id=\"advice\" name=\"userInputAdvice\" minLength=\"5\" maxLength=\"60\" placeholder=\"Sites to see, foods to try, etc.\" />\n\n                            <button onClick={ this.buttonSubmit } className=\"submitButton\">Post it!</button>\n                        </form>\n                    </div>\n                </header>\n\n                <TravelAdvice \n                displayedAdvice= {this.state.suggestions} \n                deleteAdvice= { this.deleteSuggestion } \n                />\n\n                <Footer />\n\n            </div>\n    );\n}\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
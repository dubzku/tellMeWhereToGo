{"version":3,"sources":["firebase.js","Form.js","TravelAdvice.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Form","handleChange","event","setState","target","name","value","buttonSubmit","preventDefault","database","ref","push","destination","state","userInputDestination","advice","userInputAdvice","action","htmlFor","onChange","this","type","id","onClick","Component","TravelAdvice","props","displayedAdvice","map","suggestion","key","src","alt","deleteAdvice","App","deleteSuggestion","child","remove","suggestions","photo","on","snapshot","data","val","newSuggestions","className","userSubmit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAeAA,IAASC,cAXY,CACjBC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,8CAMIR,QAAf,E,QCmCeS,E,kDAhDX,aAAgB,IAAD,8BACX,gBAOJC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAVvB,EAcfC,aAAe,SAACL,GACdA,EAAMM,iBAEQjB,EAASkB,WAAWC,MAE5BC,KAAK,CACTC,YAAa,EAAKC,MAAMC,qBACxBC,OAAQ,EAAKF,MAAMG,kBAGrB,EAAKb,SAAS,CACZW,qBAAsB,GACtBE,gBAAiB,MAxBjB,EAAKH,MAAQ,CACTC,qBAAsB,GACtBE,gBAAiB,IAJV,E,qDA+BX,OACI,gCACI,uDACA,0BAAMC,OAAO,IACT,2BAAOC,QAAQ,eAAf,sBACA,2BAAOC,SAAUC,KAAKnB,aAAcK,MAAOc,KAAKP,MAAMC,qBAAsBO,KAAK,OAAOC,GAAG,cAAcjB,KAAK,yBAE9G,2BAAOa,QAAQ,UAAf,2BACA,2BAAOC,SAAUC,KAAKnB,aAAcK,MAAOc,KAAKP,MAAMG,gBAAiBK,KAAK,OAAOC,GAAG,SAASjB,KAAK,oBAEpG,4BAAQkB,QAAUH,KAAKb,cAAvB,gB,GA1CDiB,aCsBJC,EAvBM,SAACC,GAClB,OACI,8BACI,4BAEAA,EAAMC,gBAAgBC,KAAM,SAACC,GACzB,OAEI,wBAAIC,IAAKD,EAAWC,KAChB,uCAAaD,EAAWjB,aACxB,sCAAYiB,EAAWd,QACvB,yBAAKgB,IAAI,GAAGC,IAAI,KAChB,4BAAQT,QAAU,kBAAMG,EAAMO,aAAcJ,EAAWC,OAAvD,sBC8ETI,G,wDA3Eb,aAAe,IAAD,8BACZ,gBAmDFC,iBAAmB,SAACN,GACJtC,EAASkB,WAAWC,MAC5B0B,MAAMP,GAAYQ,UApDxB,EAAKxB,MAAQ,CACXyB,YAAa,GACbC,MAAO,IAJG,E,gEAQQ,IAAD,OACLhD,EAASkB,WAAWC,MAE5B8B,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAOD,EAASE,MAEhBC,EAAiB,GAEvB,IAAK,IAAId,KAAOY,EACdE,EAAejC,KAAK,CAClBmB,IAAKA,EACLlB,YAAa8B,EAAKZ,GAAKlB,YACvBG,OAAQ2B,EAAKZ,GAAKf,SAItB,EAAKZ,SAAS,CACZmC,YAAaM,S,+BAiCjB,OACE,yBAAKC,UAAU,eAEb,kBAAC,EAAD,CACAC,WAAa1B,KAAKb,eAGlB,kBAAC,EAAD,CACAoB,gBAAkBP,KAAKP,MAAMyB,YAC7BL,aAAgBb,KAAKe,wB,GApEXX,cCJEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79c57651.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC2acaAMjzdXtheezetRsrw2gdVwpYEg8E\",\n    authDomain: \"winnie-ku-project-five.firebaseapp.com\",\n    databaseURL: \"https://winnie-ku-project-five.firebaseio.com\",\n    projectId: \"winnie-ku-project-five\",\n    storageBucket: \"winnie-ku-project-five.appspot.com\",\n    messagingSenderId: \"255739567594\",\n    appId: \"1:255739567594:web:d360859934c83adb6e2693\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\n\nclass Form extends Component {\n    constructor () {\n        super();\n        this.state = {\n            userInputDestination: '',\n            userInputAdvice: '',\n        }\n    }\n\n    handleChange = (event) => {\n      this.setState({\n        [event.target.name]: event.target.value\n      })\n    }\n\n    buttonSubmit = (event) => {\n      event.preventDefault();\n  \n      const dbRef = firebase.database().ref();\n  \n      dbRef.push({\n        destination: this.state.userInputDestination,\n        advice: this.state.userInputAdvice\n      });\n  \n      this.setState({\n        userInputDestination: \"\",\n        userInputAdvice: \"\"\n      })\n    }\n\n    render() {\n        return(\n            <header>\n                <h1>Tell Me Where To Travel</h1>\n                <form action=\"\">\n                    <label htmlFor=\"destination\">Where should I go?</label>\n                    <input onChange={this.handleChange} value={this.state.userInputDestination} type=\"text\" id=\"destination\" name=\"userInputDestination\" />\n\n                    <label htmlFor=\"advice\">What should I do there?</label>\n                    <input onChange={this.handleChange} value={this.state.userInputAdvice} type=\"text\" id=\"advice\" name=\"userInputAdvice\" />\n\n                    <button onClick={ this.buttonSubmit }>Submit</button>\n                </form>\n            </header>\n        )\n    }\n}\n\nexport default Form;","import React from 'react';\n\nconst TravelAdvice = (props) => {\n    return (\n        <main>\n            <ul>\n            {\n            props.displayedAdvice.map ( (suggestion) => {\n                return (\n\n                    <li key={suggestion.key}>\n                        <p>Country: {suggestion.destination}</p>\n                        <p>Advice: {suggestion.advice}</p>\n                        <img src=\"\" alt=\"\"/>\n                        <button onClick={ () => props.deleteAdvice (suggestion.key)}>Been there!</button>\n                    </li>\n                    \n                )\n            })\n            }\n            </ul>\n        </main>\n    )\n}\n\nexport default TravelAdvice;","import React, { Component } from 'react';\n// import axios from 'axios';\nimport firebase from './firebase';\nimport Form from './Form';\nimport TravelAdvice from './TravelAdvice'\nimport './App.css';\n\n// PSEUDOCODE for MVPs\n// User comes to the landing page, and sees 2 inputs: \n  // (1) Enter the name of a place you would recommend travelling to\n  // (2) Enter a suggestion of something to do at that place\n// User types their answer in both fields, and hits Submit\n// The data is stored in Firebase object\n// Data is pulled from Firebase, and displayed on the page \n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      suggestions: [],\n      photo: []\n    }\n  }\n\n  componentDidMount () {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n\n      const newSuggestions = [];\n\n      for (let key in data) {\n        newSuggestions.push({\n          key: key,\n          destination: data[key].destination,\n          advice: data[key].advice\n        });\n      }\n\n      this.setState({\n        suggestions: newSuggestions\n      })\n    })\n\n  }\n\n    // // API CALL\n    // axios({\n    //   url: `https://www.rijksmuseum.nl/api/en/collection`,\n    //   method: `GET`,\n    //   responseType: `json`,\n    //   params: {\n    //     key: `m6u9SwrU`,\n    //     format: `json`,\n    //     hasImage: true,\n    //     ps: 1,\n    //     q: event.target.value\n    //   }\n    // })\n    // .then((response) => {\n    //   console.log(response);\n    //   this.setState({\n    //     photo: response\n    //   });\n    // })\n  // }\n\n  deleteSuggestion = (suggestion) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(suggestion).remove();\n  }\n\n  render () {\n    return (\n      <div className=\"App wrapper\">\n\n        <Form \n        userSubmit={ this.buttonSubmit } \n        />\n\n        <TravelAdvice \n        displayedAdvice= {this.state.suggestions} \n        deleteAdvice= { this.deleteSuggestion } \n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}